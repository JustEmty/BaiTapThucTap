@page "/report-import-export-product-dashboard"
@inject IEntryStorageFormRawDataRepository entryStorageFormRawDataRepository
@inject IExportStorageRawDataRepository exportStorageRawDataRepository
@inject IProductRepository productRepository
@inject IEntryStorageFormRepository entryStorageFormRepository
@inject IExportStorageRepository exportStorageRepository

<h3>Báo cáo xuất nhập tồn</h3>
<div class="row">
    <div class="col-3">
        <EditForm Model="this" OnSubmit="OnSearch">
            <div class="form-group">
                <label for="startDate">Từ ngày</label>
                <InputDate @bind-Value="StartDate" class="form-control" id="startDate" />
            </div>
            <div class="form-group">
                <label for="startendDateDate">Đến ngày</label>
                <InputDate @bind-Value="EndDate" class="form-control" id="endDate" />
            </div>
            <button class="btn btn-primary">Tìm kiếm</button>
        </EditForm>
    </div>
    <div class="col">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Mã sản phẩm</th>
                    <th scope="col">Tên sản phẩm</th>
                    <th scope="col">SL Đầu Kỳ</th>
                    <th scope="col">SL Nhập</th>
                    <th scope="col">SL Xuất</th>
                    <th scope="col">SL Cuối Kỳ</th>
                </tr>
            </thead>
            <tbody>
                @if (ProductList.Count() > 0)
                {
                    @foreach (var entryData in groupedEntryData)
                    {
                        var product = ProductList.FirstOrDefault(p => p.Id == entryData.ProductId);
                        var exportData = groupedExportData.FirstOrDefault(e => e.ProductId == entryData.ProductId);

                        <tr>
                            <td>@entryData.ProductId</td>
                            <td>@(product?.ProductName ?? "Không xác định")</td>
                            <td>@(entryData.TotalQuantity + (exportData?.TotalQuantity ?? 0))</td>
                            <td>@entryData.TotalQuantity</td>
                            <td>@(exportData?.TotalQuantity ?? 0)</td>
                            <td>@(entryData.TotalQuantity + (exportData?.TotalQuantity ?? 0) - (exportData?.TotalQuantity ?? 0))</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="8">Không tìm thấy phiếu nhập</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
    public DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);

    public List<EntryStorageForm> EntryStorageFormList { get; set; } = new List<EntryStorageForm>();
    public List<EntryStorageFormRawData> EntryStorageFormRawDataList { get; set; } = new List<EntryStorageFormRawData>();
    public List<ExportStorage> ExportStorageList { get; set; } = new List<ExportStorage>();
    public List<ExportStorageRawData> ExportStorageRawDataList { get; set; } = new List<ExportStorageRawData>();
    public List<Product> ProductList { get; set; } = new List<Product>();

    public List<EntryStorageForm> sortedEntryStorageForms { get; set; } = new List<EntryStorageForm>();
    public List<ExportStorage> sortedExportStorageList { get; set; } = new List<ExportStorage>();

    public List<dynamic> groupedEntryData { get; set; } = new List<dynamic>();
    public List<dynamic> groupedExportData { get; set; } = new List<dynamic>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            EntryStorageFormList = await entryStorageFormRepository.GetAllAsync();
            EntryStorageFormRawDataList = await entryStorageFormRawDataRepository.GetAllAsync();
            ExportStorageList = await exportStorageRepository.GetAllAsync();
            ExportStorageRawDataList = await exportStorageRawDataRepository.GetAllAsync();
            ProductList = await productRepository.GetAllAsync();
        }
    }

    private void OnSearch()
    {
        // filter header date
        sortedEntryStorageForms = EntryStorageFormList.Where(i => i.EntryStorageFormDate >= StartDate && i.EntryStorageFormDate <= EndDate).ToList();
        sortedExportStorageList = ExportStorageList.Where(i => i.ExportStorageDate >= StartDate && i.ExportStorageDate <= EndDate).ToList();

        // filter product in header
        var entryStorageFormIds = sortedEntryStorageForms.Select(i => i.Id).ToList();
        groupedEntryData = EntryStorageFormRawDataList.GroupBy(x => new { x.ProductId, x.EntryStorageFormId }).Select(g => new
        {
            ProductId = g.Key.ProductId,
            EntryStorageFormId = g.Key.EntryStorageFormId,
            TotalQuantity = g.Sum(x => x.Quantities) ?? 0, 
            TotalPrice = g.Sum(x => x.Price) ?? 0 
        }).Where(g => entryStorageFormIds.Contains(g.EntryStorageFormId)).ToList<dynamic>();

        var exportStorageIds = sortedExportStorageList.Select(i => i.Id).ToList();
        groupedExportData = ExportStorageRawDataList.GroupBy(x => new { x.ProductId, x.ExportStorageId }).Select(g => new
        {
            ProductId = g.Key.ProductId,
            ExportStorageId = g.Key.ExportStorageId,
            TotalQuantity = g.Sum(x => x.Quantities),
            TotalPrice = g.Sum(x => x.Price) ?? 0
        }).Where(g => exportStorageIds.Contains(g.ExportStorageId)).ToList<dynamic>();
    }
}
