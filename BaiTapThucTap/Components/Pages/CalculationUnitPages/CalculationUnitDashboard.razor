@page "/calculation-unit-dashboard"
@using Microsoft.EntityFrameworkCore
@inject ICalculationUnitRepository calculationUnitRepository

<h3>Danh mục đơn vị tính</h3>
<div class="container mt-4">
    <div class="row">
        <div class="col">
            <table class="table">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Tên đơn vị tính</th>
                        <th scope="col">Ghi chú</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @if(CalculationUnitList is null)
                    {
                        <tr>
                            <td>Đang lấy dữ liệu...</td>
                        </tr>
                    }
                    else
                    {
                        @if (!CalculationUnitList.Any())
                        {
                            <tr>
                                <td>Không có dữ liệu</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (CalculationUnit item in CalculationUnitList)
                            {
                                <tr>
                                    <td>@item.CalculationUnitName</td>
                                    <td>@item.Note</td>
                                    <td>
                                        <button class="btn btn-primary" @onclick="()=>LoadCalculationUnit(item.Id)">Edit</button>
                                        <button class="btn btn-danger" @onclick="()=>DeleteCalculationUnit(item.Id)">Delete</button>
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="col">
            <EditForm Model="CalculationUnit" OnValidSubmit="OnSubmit">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label for="calculationUnitName">Tên đơn vị tính</label>
                    <InputText @bind-Value="CalculationUnit.CalculationUnitName" class="form-control" id="calculationUnitName" placeholder="kg" />
                    <ValidationMessage For="@(()=>CalculationUnit.CalculationUnitName)" />
                    <p class="text-danger">@errorMessage</p>
                </div>
                <div class="form-group">
                    <label for="note">Ghi chú</label>
                    <InputTextArea @bind-Value="CalculationUnit.Note" class="form-control" id="note" rows="3"></InputTextArea>
                </div>
                @if (CalculationUnit.Id > 0)
                {
                    <button type="reset" class="btn btn-secondary mt-4" @onclick="Reset">Hủy</button>
                }
                <button type="submit" class="btn btn-primary mt-4">@(CalculationUnit.Id > 0 ? "Sửa" : "Thêm")</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public CalculationUnit CalculationUnit { get; set; } = new CalculationUnit();

    public List<CalculationUnit> CalculationUnitList { get; set; }

    private string errorMessage = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await LoadCalculationUnitList();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadCalculationUnitList()
    {
        CalculationUnitList = await calculationUnitRepository.GetAllAsync();
    }

    private async Task LoadCalculationUnit(int id)
    {
        CalculationUnit = await calculationUnitRepository.GetAsync(id); 
    }

    private async Task CreateCalculationUnit()
    {
        try
        {
            await calculationUnitRepository.CreateAsync(CalculationUnit);
            await LoadCalculationUnitList();
            CalculationUnit = new CalculationUnit();
            errorMessage = string.Empty;
        }
        catch (DbUpdateException dbUpdateException)
        {
            errorMessage = "Tên đơn vị tính phải là duy nhất";
        }
    }

    private async Task UpdateCalculationUnit()
    {
        await calculationUnitRepository.UpdateAsync(CalculationUnit);
        await LoadCalculationUnitList();
        CalculationUnit = new CalculationUnit();
    }

    private async Task DeleteCalculationUnit(int id)
    {
        await LoadCalculationUnit(id);
        await calculationUnitRepository.DeleteAsync(CalculationUnit);
        await LoadCalculationUnitList();
        CalculationUnit = new CalculationUnit();
    }

    private async Task OnSubmit()
    {
        if(CalculationUnit.Id > 0)
        {
            await UpdateCalculationUnit();
        }
        else
        {
            await CreateCalculationUnit();
        }
    }

    private void Reset()
    {
        CalculationUnit = new CalculationUnit();
    }
}
