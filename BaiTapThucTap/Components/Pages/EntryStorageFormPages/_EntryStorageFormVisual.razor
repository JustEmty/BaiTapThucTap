<div class="col">
    <div class="mb-5 d-flex justify-content-end">
        <button class="btn btn-primary hideWhenPrint" @onclick="Print">In Phiếu Nhập</button>
    </div>
    <div>
        <div class="d-flex justify-content-between">
            <div>
                <p class="m-0">Đơn vị :</p>
                <p class="m-0">Bộ phận :</p>
            </div>
            <div>
                <h3 class="fw-bold">Phiếu Nhập Kho</h3>
            </div>
            <div>
                <h3 class="fw-bold">Mẫu số : 01 - VT</h3>
            </div>
        </div>
        <div class="d-flex gap-5">
            <div style="width: 50%">
                <p class="m-0">Ngày @EntryStorageForm.EntryStorageFormDate.Day tháng @EntryStorageForm.EntryStorageFormDate.Month năm @EntryStorageForm.EntryStorageFormDate.Year</p>
                <p class="m-0">Số phiếu nhập: @EntryStorageForm.EntryStorageFormId</p>
            </div>
            <div style="width: 50%">
                <p class="m-0">Nợ: ........................................</p>
                <p class="m-0">Có: ........................................</p>
            </div>
            <div>
                <p>(Ban Hành Theo QĐ Số 15/2006/QĐ-BTC Ngày 20/03/2006 Của Bộ Trưởng BTC)</p>
            </div>
        </div>
        <p class="m-0">Họ Tên Người Giao Hàng @SuppliersList?.Find(i => i.Id == EntryStorageForm.SupplierId)?.SupplierName</p>
        <div class="d-flex gap-5">
            <div>
                <p class="m-0">Theo TK Số:</p>
                <p class="m-0">Nhập Tại Kho: @StorageList?.Find(i => i.Id == EntryStorageForm.StorageId)?.StorageName</p>
            </div>
            <div class="flex-grow-1">
                <p class="m-0">Ngày @EntryStorageForm.EntryStorageFormDate.Day tháng @EntryStorageForm.EntryStorageFormDate.Month năm @EntryStorageForm.EntryStorageFormDate.Year của</p>
                <p class="m-0">Địa điểm:</p>
            </div>
        </div>
    </div>
    <div class="mt-2">
        <table class="table table-bordered">
            <thead style="background-color: #d2d7e3">
                <tr>
                    <th scope="col" rowspan="2">STT</th>
                    <th scope="col" rowspan="2">Tên nhãn hiệu, quy cách, phẩm chất, vật tư, dụng cụ, sản phẩm, hàng hóa</th>
                    <th scope="col" rowspan="2">Mã hàng</th>
                    <th scope="col" rowspan="2">Đơn vị tính</th>
                    <th scope="col" colspan="2" align="center">Số lượng</th>
                    <th scope="col" rowspan="2">Đơn giá</th>
                    <th scope="col" rowspan="2">Thành tiền</th>
                </tr>
                <tr>
                    <th>Kiện</th>
                    <th>Cái</th>
                </tr>
                <tr>
                    <th>A</th>
                    <th>B</th>
                    <th>C</th>
                    <th>D</th>
                    <th>1</th>
                    <th>2</th>
                    <th>3</th>
                    <th>4</th>
                </tr>
            </thead>
            <tbody>
                @foreach (EntryStorageFormRawData item in EntryStorageFormRawDataList)
                {
                    <tr>
                        <td>@(EntryStorageFormRawDataList.IndexOf(item) + 1)</td>
                        <td>@ProductList?.Find(i => i.Id == item.ProductId)?.ProductName</td>
                        <td>@item.ProductId</td>
                        <td>@CalculationUnitList?.Find(i => i.Id == ProductList?.Find(p => p.Id == item.ProductId)?.CalculationUnitId)?.CalculationUnitName</td>
                        <td>@item.Quantities</td>
                        <td>@item.Quantities</td>
                        <td>@item.Price</td>
                        <td>@(item.Quantities * item.Price)</td>
                    </tr>
                }
            </tbody>
            <tfoot style="background-color: #d2d7e3">
                <tr>
                    <th colspan="4" class="text-end">Tổng</th>
                    <th>@TotalQuantities</th>
                    <th>@TotalQuantities</th>
                    <th>@TotalPrice</th>
                    <th>@TotalBill</th>
                </tr>
            </tfoot>
        </table>
    </div>
    <p class="fw-bold">Tổng Số Tiền (Viết bằng chữ): @ConvertNumberToWords(TotalBill)</p>
    <div class="d-flex">
        <p class="fw-bold w-50">Số Chứng Từ Gốc Kèm Theo:</p>
        <p class="w-50">Ngày ...... Tháng ...... Năm ......</p>
    </div>
    <div class="d-flex mt-2 justify-content-between">
        <div>
            <p class="fw-bold text-center">Người Lập Phiếu</p>
            <p class="text-center">(Ký, họ tên)</p>
        </div>
        <div>
            <p class="fw-bold text-center">Người Giao Hàng</p>
            <p class="text-center">(Ký, họ tên)</p>
        </div>
        <div>
            <p class="fw-bold text-center">Thủ Kho</p>
            <p class="text-center">(Ký, họ tên)</p>
        </div>
        <div>
            <p class="fw-bold text-center">Kế Toán Trưởng</p>
            <p class="text-center">(Ký, họ tên)</p>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback PrintForm { get; set; }
    [Parameter]
    public EntryStorageForm EntryStorageForm { get; set; }
    [Parameter]
    public List<Supplier> SuppliersList { get; set; }
    [Parameter]
    public List<Storage> StorageList { get; set; }
    [Parameter]
    public List<Product> ProductList { get; set; }
    [Parameter]
    public List<CalculationUnit> CalculationUnitList { get; set; }
    [Parameter]
    public List<EntryStorageFormRawData> EntryStorageFormRawDataList { get; set; }

    public int? TotalQuantities { get; set; } = 0;
    public decimal? TotalPrice { get; set; } = 0;
    public decimal? TotalBill { get; set; } = 0;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        TotalBill = 0;
        TotalPrice = 0;
        TotalQuantities = 0;

        foreach (EntryStorageFormRawData item in EntryStorageFormRawDataList)
        {
            TotalQuantities += item.Quantities;
            TotalPrice += item.Price;
            TotalBill += item.Quantities * item.Price;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            foreach (EntryStorageFormRawData item in EntryStorageFormRawDataList)
            {
                TotalQuantities += item.Quantities;
                TotalPrice += item.Price;
                TotalBill += item.Quantities * item.Price;
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Print()
    {
        await PrintForm.InvokeAsync();
    }

    private string ConvertNumberToWords(decimal? number)
    {
        // Handle negative numbers
        if (number < 0) return "Âm " + ConvertNumberToWords(-number);

        // Handle zero
        if (number == 0) return "Không";

        string words = "";

        // Split the number into integer and fractional parts
        int integerPart = (int)number;
        int fractionalPart = (int)((number - integerPart) * 100); // Get two decimal places

        // Convert the integer part
        words += ConvertIntegerToWords(integerPart);

        // Add fractional part if it exists
        if (fractionalPart > 0)
        {
            if (words.Length > 0) words += " và "; // Add "và" for conjunction
            words += ConvertIntegerToWords(fractionalPart) + " phần trăm"; // "phần trăm" for percentage
        }

        return words.Trim();
    }

    private string ConvertIntegerToWords(int number)
    {
        if (number < 0) return "Âm " + ConvertNumberToWords(-number);
        if (number == 0) return "Không";

        string words = "";

        string[] unitsMap = { "", "Một", "Hai", "Ba", "Bốn", "Năm", "Sáu", "Bảy", "Tám", "Chín" };
        string[] teensMap = { "Mười", "Mười Một", "Mười Hai", "Mười Ba", "Mười Bốn", "Mười Lăm", "Mười Sáu", "Mười Bảy", "Mười Tám", "Mười Chín" };
        string[] tensMap = { "", "Mười", "Hai Mươi", "Ba Mươi", "Bốn Mươi", "Năm Mươi", "Sáu Mươi", "Bảy Mươi", "Tám Mươi", "Chín Mươi" };
        string[] hundredsMap = { "", "Một Trăm", "Hai Trăm", "Ba Trăm", "Bốn Trăm", "Năm Trăm", "Sáu Trăm", "Bảy Trăm", "Tám Trăm", "Chín Trăm" };

        if (number >= 1000000)
        {
            words += ConvertNumberToWords(number / 1000000) + " Triệu";
            number %= 1000000;
            if (number > 0) words += " ";
        }

        if (number >= 1000)
        {
            words += ConvertNumberToWords(number / 1000) + " Nghìn";
            number %= 1000;
            if (number > 0) words += " ";
        }

        if (number >= 100)
        {
            words += hundredsMap[number / 100];
            number %= 100;
            if (number > 0) words += " ";
        }

        if (number >= 20)
        {
            words += tensMap[number / 10];
            number %= 10;
            if (number > 0) words += " ";
        }
        else if (number >= 10)
        {
            words += teensMap[number - 10];
            number = 0; // Reset number as it's fully converted
        }

        if (number > 0)
        {
            words += unitsMap[number];
        }

        return words.Trim();
    }

    private string CapitalizeFirstLetter(string text)
    {
        if (string.IsNullOrEmpty(text)) return text;
        return char.ToUpper(text[0]) + text.Substring(1);
    }
}
